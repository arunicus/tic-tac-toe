npm install redux

npm install expect

let expect = require('expect')

function counter(state, action){
    return state
}

expect(counter(0, {})).toEqual(1)


step 2 : testing the pure function

let expect = require('expect')

function counter(state = 0, action){
    switch(action.type){
        case 'INC':
            return state + 1
        case 'DEC':
            return state - 1
    }
    return state
}


let actionCreators = {
    increment: () => {
        return {type: 'INC'}
    },
    decrement: () => {
        return {type: 'DEC'}
    }
}

expect(counter(0, {})).toEqual(0)

expect(counter(0, {type: 'INC'})).toEqual(1)

expect(counter(1, {type: 'INC'})).toEqual(2)

expect(counter(1, {type: 'DEC'})).toEqual(0)

expect(counter(1, {type: 'IDONTKNOW'})).toEqual(1)



step 3 : making it redux
let expect = require('expect')

function counter(state = 0, action){
    switch(action.type){
        case 'INC':
            return state + 1
        case 'DEC':
            return state - 1
    }
    return state
}

const {createStore} = require('redux')

const store = createStore(counter)

store.subscribe(()=>{
    console.log(store.getState())
})

store.dispatch({type: 'INC'})
store.dispatch({type: 'INC'})
store.dispatch({type: 'INC'})

\b[_\S\d-]+@[_\S\d-]+\.[\S]{2,3}\b

step 4: using redux in standalone html
// let expect = require('expect')

function counter(current = 0, action) {
    console.log(action);
    switch (action.type) {
        case 'INC':
            return current + (action.value || 1);
        case 'DEC':
            return current - (action.value || 1);
    }
    return current;
}


const {createStore} = Redux;
const store = createStore(counter)

store.subscribe(() => {
    console.log(store.getState());
    document.querySelector('#current').innerHTML = store.getState();
})

function incrementClicked() {
    let value = parseInt(document.querySelector('#countValue').value);
    store.dispatch({type: 'INC', value});    
}

function decrementClicked(params) {
        let value = parseInt(document.querySelector('#countValue').value);
    store.dispatch({type: 'DEC',value});
}

<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <title>Learn Redux</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux/3.7.2/redux.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/redux-thunk/2.2.0/redux-thunk.min.js"></script>
    <script src="./test.js"></script>
  </head>
  <body>
      <h1 id="counter">0</h1>
      <input id="countValue" value="1" />
      <button onclick="incrementClicked()" >increment</button>
      <button onclick="decrementClicked()" >decrement</button>
  </body>
</html>


Step 5: middle sample
const {createStore,applyMiddleware } = require('redux');

function counter(state = 0, action){
    switch(action.type){
        case 'INC':
            return state + 1
        case 'DEC':
            return state - 1
    }
    return state
}

const incrementMiddleware = store => next => action => {
  console.log(action, store.getState());
  next(action);
}

const store = createStore(counter,applyMiddleware(incrementMiddleware))
store.subscribe(() =>{
    let state = store.getState()
    state
})

store.dispatch({type: 'INC'})

Step 6 : with thunk
npm install redux-thunk
npm install node-fetch

const { createStore, applyMiddleware } = require('redux');
const thunk = require('redux-thunk').default;
var fetch = require('node-fetch');

function weather(state = 0, action) {
    switch (action.type) {
        case 'DESC':
            return action.description
    }
    return state
}

function getTemperatureForZip(zipCode) {
    return (dispatch, getState) => {
        fetch('http://samples.openweathermap.org/data/2.5/weather?zip=10018,us&appid=b1b15e88fa797225412429c1c50c122a1')
            .then(res => {
                let reponseJson = res.json()
                reponseJson.then(json => {
                    dispatch({type :'DESC',description: json.weather[0].description})
                })
            })
    }
}

const store = createStore(weather, applyMiddleware(thunk))

store.subscribe(() => {
    let state = store.getState()
    state
})

store.dispatch(getTemperatureForZip('10018'))

END 



const {createStore, applyMiddleware} = Redux
const thunk = ReduxThunk.default

function counter(state=0, action={}) {
    let value = action.value || 1;
    switch (action.type) {
        case 'INC':
            return state + value
        case 'DEC':
            return state - value
    }
    return state;
}

let actionCreators = {
    increment: () => {
        return {type: 'INC'}
    },
    incrementDelayed: () => {
        return (dispatch, getState) => {
            setTimeout(function() {
                dispatch({type: 'INC'})
            }, 2000);
        }
    },
    decrement: () => {
        return {type: 'DEC'}
    }
}



let store = createStore(counter, applyMiddleware(thunk))

store.subscribe(() => {
    document.querySelector('#counter').innerHTML = store.getState();
})

function incrementClicked(params) {
        document.querySelector('#counter').innerHTML = '...';

    store.dispatch(actionCreators.incrementDelayed());
}




	"Example 1": {
		"prefix": "ex1",
		"body": [
			"let expect = require('expect')",
			"",
			"function counter(state, action) {",
			"    return state",
			"}",
			"",
			"expect(counter(0, {})).toEqual(1)"
		],
		"description": "Example 1"
	},
	"Example 2": {
		"prefix": "ex2",
		"body": [
			"let expect = require('expect')",
			"",
			"function counter(state = 0, action){",
			"    switch(action.type){",
			"        case 'INC':",
			"            return state + 1",
			"        case 'DEC':",
			"            return state - 1",
			"    }",
			"    return state",
			"}",
			"",
			"",
			"expect(counter(0, {})).toEqual(0)",
			"",
			"expect(counter(0, {type: 'INC'})).toEqual(1)",
			"",
			"expect(counter(1, {type: 'INC'})).toEqual(2)",
			"",
			"expect(counter(1, {type: 'DEC'})).toEqual(0)",
			"",
			"expect(counter(1, {type: 'IDONTKNOW'})).toEqual(1)"
		],
		"description": "Example 2"
	},
	"Example 3": {
		"prefix": "ex3",
		"body": [
			"let expect = require('expect')",
			"",
			"function counter(state = 0, action){",
			"    switch(action.type){",
			"        case 'INC':",
			"            return state + 1",
			"        case 'DEC':",
			"            return state - 1",
			"    }",
			"    return state",
			"}",
			"",
			"",
			"let actionCreators = {",
			"    increment: () => {",
			"        return {type: 'INC'}",
			"    },",
			"    decrement: () => {",
			"        return {type: 'DEC'}",
			"    }",
			"}",
			"",
			"expect(counter(0, {})).toEqual(0)",
			"",
			"expect(counter(0, actionCreators.increment())).toEqual(1)",
			"",
			"expect(counter(1, actionCreators.increment())).toEqual(2)",
			"",
			"expect(counter(1, actionCreators.decrement())).toEqual(0)"
		],
		"description": "Example "
	},
	"Example 4": {
		"prefix": "ex4",
		"body": [
			"const {createStore} = require('redux')",
			"",
			"function counter(state = 0, action){",
			"    switch(action.type){",
			"        case 'INC':",
			"            return state + 1",
			"        case 'DEC':",
			"            return state - 1",
			"    }",
			"    return state",
			"}",
			"",
			"",
			"let actionCreators = {",
			"    increment: () => {",
			"        return {type: 'INC'}",
			"    },",
			"    decrement: () => {",
			"        return {type: 'DEC'}",
			"    }",
			"}",
			"",
			"const store = createStore(counter)",
			"",
			"store.subscribe(()=>{",
			"    console.log(store.getState())",
			"})",
			"",
			"store.dispatch(actionCreators.increment())",
			"store.dispatch(actionCreators.increment())",
			"store.dispatch(actionCreators.decrement())"
		],
		"description": "Example 4"
	},
	"html 1": {
		"prefix": "html1",
		"body": [
			"const {createStore} = Redux;",
			"",
			"function counter(state = 0, action){",
			"    switch(action.type){",
			"        case 'INC':",
			"            return state + 1",
			"        case 'DEC':",
			"            return state - 1",
			"    }",
			"    return state",
			"}",
			"",
			"",
			"let actionCreators = {",
			"    increment: () => {",
			"        return {type: 'INC'}",
			"    },",
			"    decrement: () => {",
			"        return {type: 'DEC'}",
			"    }",
			"}",
			"",
			"const store = createStore(counter)",
			"",
			"store.subscribe(() => {",
			"    document.querySelector('#counter').innerHTML = store.getState();",
			"})",
			"",
			"function incrementClicked() {",
			"    store.dispatch(actionCreators.increment());    ",
			"}",
			"",
			"function decrementClicked(params) {",
			"    store.dispatch(actionCreators.decrement());",
			"}"
		],
		"description": "Example 4"
	},
	"html 2": {
		"prefix": "html2",
		"body": [
			"const {createStore} = Redux;",
			"",
			"function counter(state=0, action={}) {",
			"    let value = action.value || 1;",
			"    switch (action.type) {",
			"        case 'INC':",
			"            return state + value",
			"        case 'DEC':",
			"            return state - value",
			"    }",
			"    return state;",
			"}",
			"",
			"",
			"let actionCreators = {",
			"    increment: () => {",
			"        return {type: 'INC'}",
			"    },",
			"    decrement: () => {",
			"        return {type: 'DEC'}",
			"    },",
			"    incrementValue: (value) => {",
			"        return {type: 'INC', value}",
			"    },",
			"    decrementValue: (value) => {",
			"        return {type: 'DEC', value}",
			"    },",
			"}",
			"",
			"const store = createStore(counter)",
			"",
			"store.subscribe(() => {",
			"    document.querySelector('#counter').innerHTML = store.getState();",
			"})",
			"",
			"function incrementClicked() {",
			"    let value = parseInt(document.querySelector('#countValue').value);",
			"    store.dispatch(actionCreators.incrementValue(value));    ",
			"}",
			"",
			"function decrementClicked(params) {",
			"    let value = parseInt(document.querySelector('#countValue').value);",
			"    store.dispatch(actionCreators.decrementValue(value));",
			"}"
		],
		"description": "Example 4"
	},
	"html 3": {
		"prefix": "html3",
		"body": [
			"const {createStore,applyMiddleware} = Redux;",
			"const thunk = ReduxThunk.default",
			"",
			"function counter(state=0, action={}) {",
			"    let value = action.value || 1;",
			"    switch (action.type) {",
			"        case 'INC':",
			"            return state + value",
			"        case 'DEC':",
			"            return state - value",
			"    }",
			"    return state;",
			"}",
			"",
			"",
			"let actionCreators = {",
			"    increment: () => {",
			"        return {type: 'INC'}",
			"    },",
			"    decrement: () => {",
			"        return {type: 'DEC'}",
			"    },",
			"    incrementDelayed: () => {",
			"        return (dispatch, getState) => {",
			"            setTimeout(function() {",
			"                dispatch({type: 'INC'})",
			"            }, 1000);",
			"        }",
			"    },",
			"    incrementValue: (value) => {",
			"        return {type: 'INC', value}",
			"    },",
			"    decrementValue: (value) => {",
			"        return {type: 'DEC', value}",
			"    },",
			"}",
			"",
			"const store = createStore(counter,applyMiddleware(thunk))",
			"",
			"store.subscribe(() => {",
			"    document.querySelector('#counter').innerHTML = store.getState();",
			"})",
			"",
			"function incrementClicked() {",
			"    let value = parseInt(document.querySelector('#countValue').value);",
			"    store.dispatch(actionCreators.incrementDelayed());    ",
			"}",
			"",
			"function decrementClicked(params) {",
			"    let value = parseInt(document.querySelector('#countValue').value);",
			"    store.dispatch(actionCreators.decrementValue(value));",
			"}"
		],
		"description": "Example 4"
	},
	"weater": {
		"prefix": "weat",
		"body": [
			"const { createStore, applyMiddleware } = require('redux');",
			"const thunk = require('redux-thunk').default;",
			"var fetch = require('node-fetch');",
			"",
			"function weatherReducer(state = 0, action) {",
			"    switch (action.type) {",
			"        case 'DESC':",
			"            return action.description",
			"    }",
			"    return state",
			"}",
			"",
			"let actionCreator = {",
			"    getTemperatureAction: (zipCode) => {",
			"        return (dispatch, getState) => {",
			"            fetch(`http://samples.openweathermap.org/data/2.5/weather?zip=zipCode,us&appid=b1b15e88fa797225412429c1c50c122a1`)",
			"                .then(res => {",
			"                    let reponseJson = res.json()",
			"                    reponseJson.then(json => {",
			"                        // json",
			"                        dispatch({ type: 'DESC', description: json.weather[0].description })",
			"                    })",
			"                })",
			"        }",
			"    }",
			"}",
			"",
			"const store = createStore(weatherReducer, applyMiddleware(thunk))",
			"",
			"store.subscribe(() => {",
			"    let state = store.getState()",
			"    state",
			"})",
			"",
			"store.dispatch(actionCreator.getTemperatureAction('07070'))"
		],
		"description": "Example 4"
	},